unit TriggerSincronizador;

interface
uses System.SysUtils, System.DateUtils, Trigger, ThreadTable, Table, Thread,
Vcl.Dialogs, ConnectionDB, TelemetryDBConn;

type
  /// <summary>
  ///   Clase Trigger que lanzara la aplicacion del sincronizador, siempre
  ///  y cuando se cumplan las condiciones para que pueda ejecutarse.
  /// </summary>
  TTriggerSincronizador = class(TInterfacedObject, ITrigger)
  private
    FThread : TThread;
    FThreadTable : ITable;
    FConnection : IConnectionDB;
    /// <summary>
    ///   Crea el registro utilizando los metodos de la clase TThreadTable que
    ///  implementa la interface Table
    /// </summary>
    procedure CrearRegistro;
    /// <summary>
    ///   Actualiza el registro utilizando los metodos de la clase TThreadTable
    /// </summary>
    /// <param name="AStatus">
    ///   Status del thread
    /// </param>
    /// <param name="AFecha">
    ///   Fecha del thread yyyy-mm-dd
    /// </param>
    procedure ActualizarRegistro(AStatus : String; AFecha : TDate);
    /// <summary>
    ///   Funcion que valida si se puede lanzar el sincronizador
    /// </summary>
    /// <returns>
    ///     True si se puede lanzar el sincronizador.
    ///     False si no se puede lanzar el sincronizador.
    /// </returns>
    function ListoParaEjecutar : Boolean;
    /// <summary>
    ///   Funcion que valida si existe un registro o no.
    /// </summary>
    /// <returns>
    ///     True si existe.
    ///     False si no existe.
    /// </returns>
    function ExisteRegistro : Boolean;
  public
    /// <summary>
    ///     Inicializa la instancia de la tabla TThreadTable
    /// </summary>
    constructor Create;
    /// <summary>
    ///   Con este metodo el trigger ejecutara sus actividades
    /// </summary>
    procedure Ejecutar;

  end;

implementation
constructor TTriggerSincronizador.Create;
begin
  FThreadTable := TThreadTable.Create;
end;

procedure TTriggerSincronizador.Ejecutar;
var
  LCurrentDate: TDateTime;
begin
  LCurrentDate := Now;
  // Logica para decidir  si se debe lanzar el sincronizador o no
  if   ExisteRegistro then
    begin
      ShowMessage('SI EXISTE');
      if (ListoParaEjecutar) then
        begin
          ShowMessage('EJECUTAR');
          ActualizarRegistro('E', LCurrentDate);
        end
      else
        ShowMessage('NO EJECUTAR');
    end
  else
    begin
      ShowMessage('NO EXISTE');
      CrearRegistro;
      ShowMessage('CREADO');
    end;

end;


procedure TTriggerSincronizador.CrearRegistro;
var
  LCurrentDate: TDateTime;
begin
  LCurrentDate := Now;
  FThread := TThread.Create('P', LCurrentDate);
  try
    FThreadTable.INSERT(FThread);
  finally
    FreeAndNil(FThread);
  end;

end;

procedure TTriggerSincronizador.ActualizarRegistro(AStatus: string; AFecha: TDate);
begin
  FThread := TThread.Create(AStatus, AFecha);
  try
    //FThreadTable.UPDATE(FThread);
    FThreadTable.UPDATE_LOCK(FThread);
  finally
    FreeAndNil(FThread);
  end;

end;

function TTriggerSincronizador.ExisteRegistro: Boolean;
begin
  FThread := FThreadTable.SELECT_BY_NAME('ControlTelemetria');
  if(FThread.status = '' ) then
    Result := False
  else
    Result := True;
end;

function TTriggerSincronizador.ListoParaEjecutar: Boolean;
var
  LCurrentDate: TDateTime;
begin
  LCurrentDate := Now;
   if (( IsToday(FThread.fecha)) and ((FThread.status = 'F') or (FThread.status = 'E')))
      OR ((not IsToday(FThread.fecha)) and (FThread.status = 'E'))
    then
    Result := False
   else
    Result := True;
end;

end.
