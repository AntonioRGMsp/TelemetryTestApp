unit TelemetryDBConn;

interface
uses ConnectionDB, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error,
  FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool,
  FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.FB, FireDAC.Phys.FBDef,
  FireDAC.VCLUI.Wait, FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf,
  FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client, Vcl.Grids,
  Vcl.Dialogs;

type
    /// <summary>
    ///   Clase encargada de crear y manipular la conexion a la DB
    ///  Aplica el patron Singleton para mantener una unica instancia en
    ///  toda la App
    /// </summary>
  TTelemetryDBConn = class(TInterfacedObject, IConnectionDB)
    private
      FDConnectionDB : TFDConnection;
      FInstance : IConnectionDB;


    public
      constructor Create;
      /// <summary>
      ///   Se encarga de crear la conexion a la BD y dejarla lista para interactuar.
      /// </summary>
      procedure Connect;
      /// <summary>
      ///   Se encarga de cerrar la conexion con la BD
      /// </summary>
      procedure Close;
      /// <summary>
      ///   se encarga de aplicar el patron Singleton para asegurarnos de tener
      ///  solamente una instancia con la conexion a la BD.
      /// </summary>
      function GetInstance : IConnectionDB;
      /// <summary>
      ///     Ignorar esta funcion, es una funcion en etapa de prueba
      /// </summary>
      function GetComponentConnection : TFDConnection;
  end;

implementation
  constructor TTelemetryDBConn.Create;
  begin

  end;

  procedure TTelemetryDBConn.Connect;
  begin
    // Se crea la configuracion para poder conectarse a la DB
    // Todos estos campos son requeridos para crear la conexion
    FDConnectionDB := TFDConnection.Create(nil);
    //FDConnectionDB.ConnectionName := 'TestConn';
    FDConnectionDB.Params.DriverID := 'FB';
    FDConnectionDB.Params.Database := 'C:\data\TELEMETRY.FDB';
    FDConnectionDB.Params.UserName := 'SYSDBA';
    FDConnectionDB.Params.Password := 'masterkey';
    FDConnectionDB.Params.Add('port=3050');
    FDConnectionDB.Connected := True;

  end;

  procedure TTelemetryDBConn.Close;
  begin
    FDConnectionDB.Close;
  end;

  function TTelemetryDBConn.GetInstance: IConnectionDB;
  begin
    if not Assigned (FInstance) then
      FInstance := TTelemetryDBConn.Create;

    Result := FInstance;
  end;

  function TTelemetryDBConn.GetComponentConnection: TFDConnection;
  begin
    Result := FDConnectionDB;
  end;

end.
